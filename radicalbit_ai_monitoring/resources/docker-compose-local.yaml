services:
  ui:
    image: radicalbit/radicalbit-ai-monitoring-ui:latest
    depends_on:
      api:
        condition: service_healthy
    environment:
      APP_BASE_URL: "http://localhost:9000/api"
    ports:
      - 5173:80

  api:
    image: radicalbit/radicalbit-ai-monitoring-api:latest
    ports:
      - 9000:9000
    environment:
      DB_HOST: "postgres"
      DB_PORT: 5432
      DB_USER: "postgres"
      DB_PWD: "postgres"
      DB_NAME: "radicalbit"
      AWS_ACCESS_KEY_ID: "minio"
      AWS_SECRET_ACCESS_KEY: "minio123"
      AWS_REGION: "us-east-1"
      S3_ENDPOINT_URL: "http://minio:9000"
      S3_BUCKET_NAME: "test-bucket"
      KUBECONFIG_FILE_PATH: "/opt/kubeconfig/kubeconfig.yaml"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      createbuckets:
        condition: service_completed_successfully
      k3s:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9000/healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/k3s_data/kubeconfig/kubeconfig.yaml:/opt/kubeconfig/kubeconfig.yaml

  migrations:
    image: radicalbit/radicalbit-ai-monitoring-migrations:latest
    environment:
      DB_HOST: "postgres"
      DB_PORT: 5432
      DB_USER: "postgres"
      DB_PWD: "postgres"
      DB_NAME: "radicalbit"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15.7-alpine
    environment:
      POSTGRES_DB: radicalbit
      POSTGRES_PASSWORD: postgres
    volumes:
      - rbit-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    ports:
      - "9090:9000"
      - "9091:9001"
    volumes:
      - rbit-minio_storage:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server --console-address ":9001" /data
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 2

  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/test-bucket;
      /usr/bin/mc policy set public myminio/test-bucket;
      exit 0;
      "

  init-data:
    image: postgres:15.7-alpine
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: radicalbit
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./docker/init-data/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      PGPASSWORD=postgres psql -h postgres -U postgres -d radicalbit -f /docker-entrypoint-initdb.d/init_db.sql;
      "

  minio-mirror:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: /bin/sh /scripts/mirror_files.sh
    volumes:
      - ./docker/init-data/mirror_files.sh:/scripts/mirror_files.sh
      - ./docker/init-data/quickstarts/data:/data

  k3s:
    image: rancher/k3s:v1.30.1-k3s1
    networks:
      - default
    entrypoint: /bin/sh
    command: "-c /opt/entrypoint/entrypoint.sh"
    tmpfs:
      - /run
      - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: "no"
    environment:
      K3S_KUBECONFIG_OUTPUT: /output/kubeconfig.yaml
      K3S_KUBECONFIG_MODE: 666
    volumes:
      - rbit-k3s-server:/var/lib/rancher/k3s
      # This is just so that we get the kubeconfig file out
      - ./docker/k3s_data/kubeconfig:/output
      # Init spark needed resources, add other custom yaml file here below if needed (e.g. secrets)
      - ./docker/k3s_data/manifests/spark-init.yaml:/var/lib/rancher/k3s/server/manifests/spark-init.yaml
      # Mount entrypoint
      - ./docker/k3s_data/init/entrypoint.sh:/opt/entrypoint/entrypoint.sh
    expose:
      - "6443"  # Kubernetes API Server
      - "80"    # Ingress controller port 80
      - "443"   # Ingress controller port 443
    ports:
      - 6443:6443
    healthcheck:
      test: [ "CMD-SHELL", "netstat -tuln | grep ':6443 ' || exit 1" ]
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 2

volumes:
  rbit-k3s-server: {}
  rbit-data: {}
  rbit-minio_storage: {}
networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: "172.98.0.0/16" # Self-defined subnet on local machine